import { D as DefaultService, B as BaseHttpRequest, a as OpenAPIConfig, b as OpenPipeConfig, C as CancelablePromise } from './shared-CaW1D4kA.cjs';
import 'openai';
import 'openai/resources';

type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;
declare class OPClient {
    readonly default: DefaultService;
    readonly request: BaseHttpRequest;
    constructor(config?: Partial<OpenAPIConfig>, HttpRequest?: HttpRequestConstructor);
}

declare class OpenPipe {
    baseClient: OPClient;
    constructor(config?: OpenPipeConfig);
    updateLogTags(...params: Parameters<OPClient["default"]["updateLogTags"]>): CancelablePromise<{
        matchedLogs: number;
    }>;
    updateLogMetadata(...params: Parameters<OPClient["default"]["updateLogMetadata"]>): CancelablePromise<{
        matchedLogs: number;
    }>;
    report(...params: Parameters<OPClient["default"]["report"]>): CancelablePromise<{
        status: ("ok" | "error");
    }>;
    getCriterionJudgement(...params: Parameters<OPClient["default"]["getCriterionJudgement"]>): CancelablePromise<{
        score: number;
        explanation?: string;
        usage?: {
            total_tokens: number;
        };
    }>;
    reportAnthropic(...params: Parameters<OPClient["default"]["reportAnthropic"]>): CancelablePromise<{
        status: ("ok" | "error");
    }>;
    createDataset(...params: Parameters<OPClient["default"]["createDataset"]>): CancelablePromise<{
        object: "dataset";
        id: string;
        name: string;
        created: string;
        updated: string;
        dataset_entry_count: number;
        fine_tune_count: number;
    }>;
    unstableDatasetCreate(...params: Parameters<OPClient["default"]["unstableDatasetCreate"]>): CancelablePromise<{
        datasetId: string;
    }>;
    listDatasets(...params: Parameters<OPClient["default"]["listDatasets"]>): CancelablePromise<{
        object: "list";
        data: Array<{
            object: "dataset";
            id: string;
            name: string;
            created: string;
            updated: string;
            dataset_entry_count: number;
            fine_tune_count: number;
        }>;
    }>;
    deleteDataset(...params: Parameters<OPClient["default"]["deleteDataset"]>): CancelablePromise<{
        id: string;
        object: "dataset";
        deleted: boolean;
    }>;
    unstableDatasetDelete(...params: Parameters<OPClient["default"]["unstableDatasetDelete"]>): CancelablePromise<{
        datasetId: string;
    }>;
    createDatasetEntries(...params: Parameters<OPClient["default"]["createDatasetEntries"]>): CancelablePromise<{
        object: "dataset.entries.creation";
        entries_created: number;
        errors: {
            object: "list";
            data: Array<{
                object: "dataset.entries.creation.error";
                entry_index: number;
                message: string;
            }>;
        };
    }>;
    unstableDatasetEntryCreate(...params: Parameters<OPClient["default"]["unstableDatasetEntryCreate"]>): CancelablePromise<{
        createdEntries: number;
        errors: Array<{
            index: number;
            message: string;
        }>;
    }>;
    createModel(...params: Parameters<OPClient["default"]["createModel"]>): CancelablePromise<{
        id: string;
        name: string;
        object: "model";
        description: string | null;
        created: string;
        updated: string;
        openpipe: {
            baseModel: string;
            hyperparameters: Record<string, any> | null;
            status: "PENDING" | "TRAINING" | "DEPLOYED" | "ERROR" | "DEPRECATED" | "PENDING_DEPRECATION" | "QUEUED" | "PROVISIONING";
            datasetId: string;
            errorMessage: string | null;
        };
        contextWindow: number;
        maxCompletionTokens: number;
        capabilities: Array<"chat" | "tools" | "json">;
        pricing: {
            chatIn: number;
            chatOut: number;
        };
        owned_by: string;
    }>;
    unstableFinetuneCreate(...params: Parameters<OPClient["default"]["unstableFinetuneCreate"]>): CancelablePromise<{
        id: string;
    }>;
    getModel(...params: Parameters<OPClient["default"]["getModel"]>): CancelablePromise<{
        id: string;
        name: string;
        object: "model";
        description: string | null;
        created: string;
        updated: string;
        openpipe: {
            baseModel: string;
            hyperparameters: Record<string, any> | null;
            status: "PENDING" | "TRAINING" | "DEPLOYED" | "ERROR" | "DEPRECATED" | "PENDING_DEPRECATION" | "QUEUED" | "PROVISIONING";
            datasetId: string;
            errorMessage: string | null;
        };
        contextWindow: number;
        maxCompletionTokens: number;
        capabilities: Array<"chat" | "tools" | "json">;
        pricing: {
            chatIn: number;
            chatOut: number;
        };
        owned_by: string;
    }>;
    unstableFinetuneGet(...params: Parameters<OPClient["default"]["unstableFinetuneGet"]>): CancelablePromise<{
        id: string;
        status: ("PENDING" | "STARTED" | "TRANSFERRING_TRAINING_DATA" | "TRAINING" | "DEPLOYING" | "DEPLOYED" | "ERROR" | "DEPRECATED" | "PENDING_DEPRECATION" | "QUEUED" | "PROVISIONING");
        slug: string;
        baseModel: string;
        errorMessage: string | null;
        datasetId: string;
        createdAt: string;
    }>;
    listModels(...params: Parameters<OPClient["default"]["listModels"]>): CancelablePromise<{
        object: "list";
        data: Array<{
            id: string;
            name: string;
            object: "model";
            description: string | null;
            created: string;
            updated: string;
            openpipe: {
                baseModel: string;
                hyperparameters: Record<string, any> | null;
                status: "PENDING" | "TRAINING" | "DEPLOYED" | "ERROR" | "DEPRECATED" | "PENDING_DEPRECATION" | "QUEUED" | "PROVISIONING";
                datasetId: string;
                errorMessage: string | null;
            };
            contextWindow: number;
            maxCompletionTokens: number;
            capabilities: Array<"chat" | "tools" | "json">;
            pricing: {
                chatIn: number;
                chatOut: number;
            };
            owned_by: string;
        }>;
    }>;
    deleteModel(...params: Parameters<OPClient["default"]["deleteModel"]>): CancelablePromise<{
        id: string;
        object: "model";
        deleted: boolean;
    }>;
    unstableFinetuneDelete(...params: Parameters<OPClient["default"]["unstableFinetuneDelete"]>): CancelablePromise<{
        deleted: string;
    }>;
}

export { OpenPipe as default };
